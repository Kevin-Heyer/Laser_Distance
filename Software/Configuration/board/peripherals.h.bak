/***********************************************************************************************************************
 * This file was generated by the MCUXpresso Config Tools. Any manual edits made to this file
 * will be overwritten if the respective MCUXpresso Config Tools is used to update this file.
 **********************************************************************************************************************/

#ifndef _PERIPHERALS_H_
#define _PERIPHERALS_H_

/***********************************************************************************************************************
 * Included files
 **********************************************************************************************************************/
#include "fsl_common.h"
#include "fsl_adc.h"
#include "fsl_flexcan.h"
#include "fsl_clock.h"
#include "fsl_semc.h"
#include "fsl_lpspi_cmsis.h"
#include "fsl_lpi2c_cmsis.h"
#include "fsl_flexspi.h"
#include "fsl_flexspi_edma.h"
#include "fsl_pwm.h"
#include "usb_device_composite.h"
#include "fsl_debug_console.h"
#include "lwip/opt.h"
#include "lwip/tcpip.h"
#include "lwip/netifapi.h"
#include "lwip/sys.h"
#include "lwip/sockets.h"
#include "lwip/api.h"
#include "lwip/dhcp.h"
#include "lwip/icmp.h"
#include "lwip/errno.h"
#include "enet_ethernetif.h"
#include "fsl_enet.h"
#include "fsl_enet_mdio.h"
#include "fsl_phyksz8081.h"

#if defined(__cplusplus)
extern "C" {
#endif /* __cplusplus */

/***********************************************************************************************************************
 * Definitions
 **********************************************************************************************************************/
/* Definitions for BOARD_InitPeripherals functional group */
/* BOARD_InitPeripherals defines for ADC1 */
/* Definition of peripheral ID */
#define ADC1_PERIPHERAL ADC1
/* Definition of special channel interconnected with ADC_ETC which takes real channel to be measured from ADC_ETC. */
#define ADC1_CHANNEL_DRIVEN_BY_ADC_ETC 16U
/* Definition of peripheral ID */
#define CAN1_PERIPHERAL CAN1
/* Definition of the clock source frequency */
#define CAN1_CLOCK_SOURCE 2000000UL
/* BOARD_InitPeripherals defines for SEMC */
/* Definition of peripheral ID. */
#define SEMC_EXTRAM_PERIPHERAL SEMC
/* Definition of peripheral ID */
#define CAN2_PERIPHERAL CAN2
/* Definition of the clock source frequency */
#define CAN2_CLOCK_SOURCE 2000000UL
/* Definition of peripheral ID */
#define CAN3_PERIPHERAL CAN3
/* Definition of the clock source frequency */
#define CAN3_CLOCK_SOURCE 2000000UL
/* Definition of peripheral ID */
#define IMU_SPI_PERIPHERAL Driver_SPI1
/* Definition of the clock source frequency */
#define IMU_SPI_CLOCK_SOURCE_FREQ 6000000UL
/* LPI2C1 defines */
/* Definition of peripheral driver */
#define USB_I2C_CMSIS_DRIVER Driver_I2C1
/* Definition of the clock source frequency */
#define USB_I2C_CLOCK_SOURCE_FREQ 3000000UL
/* Definition of peripheral ID */
#define QSPI_EXTFLASH_PERIPHERAL FLEXSPI2
/* Definition of peripheral ID */
#define QSPI_ADC_PERIPHERAL FLEXSPI
/* QSPI_ADC interrupt vector ID (number). */
#define QSPI_ADC_IRQN FLEXSPI_IRQn
/* QSPI_ADC interrupt handler identifier. */
#define QSPI_ADC_IRQHANDLER FLEXSPI_IRQHandler
/* Definition of peripheral ID */
#define RGB_PWM4_PERIPHERAL PWM4
/* Definition of submodule 0 ID */
#define RGB_PWM4_SM0 kPWM_Module_0
/* Definition of clock source of submodule 0 frequency in Hertz */
#define RGB_PWM4_SM0_SM_CLK_SOURCE_FREQ_HZ 3000000U
/* Definition of submodule 0 counter clock source frequency in Hertz - RGB_PWM4_SM0_SM_CLK_SOURCE_FREQ_HZ divided by prescaler */
#define RGB_PWM4_SM0_COUNTER_CLK_SOURCE_FREQ_HZ 3000000U
/* Definition of submodule 0 counter (PWM) frequency in Hertz */
#define RGB_PWM4_SM0_COUNTER_FREQ_HZ 20000U
/* Definition of submodule 0 channel A ID */
#define RGB_PWM4_SM0_A kPWM_PwmA
/* Definition of submodule 0 channel B ID */
#define RGB_PWM4_SM0_B kPWM_PwmB
/* Definition of submodule 0 channel X ID */
#define RGB_PWM4_SM0_X kPWM_PwmX
/* Definition of fault Fault0 ID */
#define RGB_PWM4_F0_FAULT0 kPWM_Fault_0
/* Definition of fault Fault1 ID */
#define RGB_PWM4_F0_FAULT1 kPWM_Fault_1
/* Definition of fault Fault2 ID */
#define RGB_PWM4_F0_FAULT2 kPWM_Fault_2
/* Definition of fault Fault3 ID */
#define RGB_PWM4_F0_FAULT3 kPWM_Fault_3
/* Debug console is initialized in the peripheral tool */
#define BOARD_INIT_DEBUG_CONSOLE_PERIPHERAL 
/* Definition of serial peripheral instance */
#define DEBUGCONSOLE_INSTANCE 0U
/* Definition of serial peripheral type */
#define DEBUGCONSOLE_TYPE kSerialPort_Swo
/* Definition of the Baud rate */
#define DEBUGCONSOLE_BAUDRATE 1000000UL
/* Definition of the clock source frequency */
#define DEBUGCONSOLE_CLK_FREQ 6000000UL
/* @TEST_ANCHOR */
/* IP address definitions */
#ifndef LWIP_NETIF0_IPADDR0
#define LWIP_NETIF0_IPADDR0 0U
#endif
#ifndef LWIP_NETIF0_IPADDR1
#define LWIP_NETIF0_IPADDR1 0U
#endif
#ifndef LWIP_NETIF0_IPADDR2
#define LWIP_NETIF0_IPADDR2 0U
#endif
#ifndef LWIP_NETIF0_IPADDR3
#define LWIP_NETIF0_IPADDR3 0U
#endif
/* Subnet mask definitions */
#ifndef LWIP_NETIF0_NETMASK0
#define LWIP_NETIF0_NETMASK0 255U
#endif
#ifndef LWIP_NETIF0_NETMASK1
#define LWIP_NETIF0_NETMASK1 255U
#endif
#ifndef LWIP_NETIF0_NETMASK2
#define LWIP_NETIF0_NETMASK2 255U
#endif
#ifndef LWIP_NETIF0_NETMASK3
#define LWIP_NETIF0_NETMASK3 0U
#endif
/* Default gateway definitions */
#ifndef LWIP_NETIF0_GW0
#define LWIP_NETIF0_GW0 0U
#endif
#ifndef LWIP_NETIF0_GW1
#define LWIP_NETIF0_GW1 0U
#endif
#ifndef LWIP_NETIF0_GW2
#define LWIP_NETIF0_GW2 0U
#endif
#ifndef LWIP_NETIF0_GW3
#define LWIP_NETIF0_GW3 0U
#endif
/* MAC address definition */
#ifndef LWIP_NETIF0_MAC_ADDRESS
#define LWIP_NETIF0_MAC_ADDRESS {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}
#endif
/* PHY address definition */
#ifndef LWIP_NETIF0_PHY_ADDRESS
#define LWIP_NETIF0_PHY_ADDRESS 0x0
#endif
/* PHY options definition */
#define LWIP_NETIF0_PHY_OPS phyksz8081_ops
/* MDIO options definition */
#define LWIP_NETIF0_MDIO_OPS enet_ops
/* MDIO resource definition */
#define LWIP_NETIF0_MDIO_RESOURCE {ENET2, 3000000UL}

/***********************************************************************************************************************
 * Global variables
 **********************************************************************************************************************/
extern const adc_config_t ADC1_config;
extern const flexcan_config_t CAN1_config;
/* Message buffer 0 configuration structure */
extern const flexcan_rx_mb_config_t CAN1_rx_mb_config_0;
extern semc_config_t SEMC_extRAM_config;
extern semc_sdram_config_t SEMC_extRAM_sdram_struct;
extern const flexcan_config_t CAN2_config;
/* Message buffer 0 configuration structure */
extern const flexcan_rx_mb_config_t CAN2_rx_mb_config_0;
extern const flexcan_config_t CAN3_config;
/* Message buffer 0 configuration structure */
extern const flexcan_rx_mb_config_t CAN3_rx_mb_config_0;
extern const flexspi_config_t QSPI_extFlash_config;
extern flexspi_edma_handle_t QSPI_extFlash_eDMA_Handle;
extern const flexspi_config_t QSPI_ADC_config;
extern pwm_config_t RGB_PWM4_SM0_config;

extern pwm_signal_param_t RGB_PWM4_SM0_pwm_function_config[1];
extern const pwm_fault_input_filter_param_t RGB_PWM4_faultInputFilter_config;
extern const pwm_fault_param_t RGB_PWM4_Fault0_fault_config;
extern const pwm_fault_param_t RGB_PWM4_Fault1_fault_config;
extern const pwm_fault_param_t RGB_PWM4_Fault2_fault_config;
extern const pwm_fault_param_t RGB_PWM4_Fault3_fault_config;
/* Network interface structure */
extern struct netif lwIP_netif0;
/* IPv4 adress handle */
extern ip4_addr_t lwIP_netif0_ipaddr;
/* IPv4 netmask handle */
extern ip4_addr_t lwIP_netif0_netmask;
/* IPv4 gateway handle */
extern ip4_addr_t lwIP_netif0_gw;

/***********************************************************************************************************************
 * Global functions
 **********************************************************************************************************************/
/* Signal event function for component IMU_SPI*/
extern void LPSPI1_SignalEvent(uint32_t event);
/* Get clock source frequency function for component IMU_SPI */
uint32_t LPSPI1_GetFreq(void);
/* Signal event function for component USB_I2C*/
extern void LPI2C1_SignalEvent(uint32_t event);
/* Get clock source frequency function for component USB_I2C */
uint32_t LPI2C1_GetFreq(void);

/***********************************************************************************************************************
 * Initialization functions
 **********************************************************************************************************************/

void BOARD_InitPeripherals(void);

/***********************************************************************************************************************
 * BOARD_InitBootPeripherals function
 **********************************************************************************************************************/
void BOARD_InitBootPeripherals(void);

#if defined(__cplusplus)
}
#endif

#endif /* _PERIPHERALS_H_ */
